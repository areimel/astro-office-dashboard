---
import SettingsButton from "./settingsButton.astro";

interface Props {
  floatingLabel?: string;
}

const { floatingLabel } = Astro.props;

const colors = [
  { name: 'blue', value: '#3b82f6' },
  { name: 'purple', value: '#8b5cf6' },
  { name: 'green', value: '#22c55e' },
  { name: 'red', value: '#ef4444' },
  { name: 'orange', value: '#f97316' },
  { name: 'pink', value: '#ec4899' },
];
---

<div class="relative">
  <SettingsButton
    id="accent-color-toggle"
    ariaLabel="Change Accent Color"
    aria-expanded="false"
    floatingLabel={floatingLabel}
  >
    <svg 
      xmlns="http://www.w3.org/2000/svg" 
      class="h-6 w-6" 
      fill="none" 
      viewBox="0 0 24 24" 
      stroke="currentColor"
    >
      <path 
        stroke-linecap="round" 
        stroke-linejoin="round" 
        stroke-width="2" 
        d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" 
      />
    </svg>
  </SettingsButton>
  
  <!-- Color picker dropdown -->
  <div id="color-picker-dropdown" class="hidden absolute bottom-full left-0 mb-2 p-2 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-300 dark:border-gray-600 z-10 w-40 aspect-square">
    <div class="flex justify-between items-center mb-2 pb-2 border-b border-gray-200 dark:border-gray-700">
      <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Select Color</span>
      <button
        id="close-picker"
        class="p-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
        aria-label="Close color picker"
      >
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          class="h-4 w-4" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path 
            stroke-linecap="round" 
            stroke-linejoin="round" 
            stroke-width="2" 
            d="M6 18L18 6M6 6l12 12" 
          />
        </svg>
      </button>
    </div>
    <div class="grid grid-cols-3 gap-2 place-items-center ">
      {colors.map(color => (
        <button
          class="w-8 h-8 rounded-full border-2 border-gray-500 dark:border-gray-300 hover:scale-110 transition-transform duration-200 color-option"
          style={`background-color: ${color.value};`}
          data-color={color.name}
          data-value={color.value}
          aria-label={`Select ${color.name} accent color`}
        />
      ))}
    </div>
  </div>
</div>

<script>
  // Function to set accent color
  function setAccentColor(colorName: string, colorValue: string) {
    document.documentElement.style.setProperty('--accent-color', colorValue);
    document.documentElement.style.setProperty('--accent-color-dark', adjustColorBrightness(colorValue, -20));
    localStorage.setItem('accentColor', JSON.stringify({ name: colorName, value: colorValue }));
  }

  // Function to adjust color brightness
  function adjustColorBrightness(hex: string, percent: number) {
    // Convert hex to RGB
    let r = parseInt(hex.substring(1,3), 16);
    let g = parseInt(hex.substring(3,5), 16);
    let b = parseInt(hex.substring(5,7), 16);

    // Adjust brightness
    r = Math.max(0, Math.min(255, r + (r * percent / 100)));
    g = Math.max(0, Math.min(255, g + (g * percent / 100)));
    b = Math.max(0, Math.min(255, b + (b * percent / 100)));

    // Convert back to hex
    return `#${Math.round(r).toString(16).padStart(2, '0')}${Math.round(g).toString(16).padStart(2, '0')}${Math.round(b).toString(16).padStart(2, '0')}`;
  }

  // Function to toggle color picker visibility
  function toggleColorPicker() {
    const dropdown = document.getElementById('color-picker-dropdown');
    const toggleButton = document.getElementById('accent-color-toggle');
    const isVisible = dropdown?.classList.toggle('hidden');
    toggleButton?.setAttribute('aria-expanded', (!isVisible).toString());
  }

  // Function to close color picker
  function closeColorPicker() {
    const dropdown = document.getElementById('color-picker-dropdown');
    const toggleButton = document.getElementById('accent-color-toggle');
    dropdown?.classList.add('hidden');
    toggleButton?.setAttribute('aria-expanded', 'false');
  }

  // Initialize accent color from localStorage or default
  function initAccentColor() {
    const savedColor = localStorage.getItem('accentColor');
    if (savedColor) {
      const { name, value } = JSON.parse(savedColor);
      setAccentColor(name, value);
    } else {
      // Default to blue
      setAccentColor('blue', '#3b82f6');
    }
  }

  // Add click event listeners
  document.getElementById('accent-color-toggle')?.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleColorPicker();
  });

  document.getElementById('close-picker')?.addEventListener('click', (e) => {
    e.stopPropagation();
    closeColorPicker();
  });

  // Close picker when clicking outside
  document.addEventListener('click', (e) => {
    const dropdown = document.getElementById('color-picker-dropdown');
    const toggleButton = document.getElementById('accent-color-toggle');
    if (!dropdown?.contains(e.target as Node) && !toggleButton?.contains(e.target as Node)) {
      closeColorPicker();
    }
  });

  // Add click event listeners to color options
  document.querySelectorAll('.color-option').forEach(button => {
    button.addEventListener('click', (e) => {
      const target = e.target as HTMLButtonElement;
      const colorName = target.dataset.color!;
      const colorValue = target.dataset.value!;
      setAccentColor(colorName, colorValue);
      closeColorPicker(); // Close picker after selection
    });
  });

  // Initialize accent color
  initAccentColor();
</script>

<style is:global>
  :root {
    --accent-color: #3b82f6;
    --accent-color-dark: #2563eb;
  }
</style> 
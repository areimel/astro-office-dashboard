---
import { Icon } from 'astro-icon/components'
---

<div class="flex flex-col items-center justify-center h-full">
  <div id="weather-display" class="hidden flex-col items-center justify-center space-y-4">
    <div class="flex items-center">
      <Icon id="weather-icon" name="carbon:partly-cloudy" class="w-24 h-24 text-[var(--accent-color)]" />
      <div class="text-6xl font-bold text-[var(--accent-color)] dark:text-[var(--accent-color)] ml-4">
        <span id="temperature"></span>Â°C
      </div>
    </div>
    <div id="description" class="text-2xl text-gray-700 dark:text-gray-300 capitalize"></div>
    <div id="location" class="text-lg text-gray-600 dark:text-gray-400"></div>
    <button
      id="change-location"
      class="mt-2 text-base text-[var(--accent-color)] dark:text-[var(--accent-color)] hover:text-[var(--accent-color-dark)] dark:hover:text-[var(--accent-color-dark)] hover:underline flex items-center gap-2"
    >
      <Icon name="carbon:location" class="w-5 h-5" />
      Change location
    </button>
  </div>

  <form id="zip-form" class="flex-1 flex flex-col items-center justify-center space-y-4">
    <div class="text-center space-y-2">
      <label for="zipcode" class="block text-lg font-medium text-gray-700 dark:text-gray-300">
        Enter your ZIP code for local weather
      </label>
      <input
        type="text"
        id="zipcode"
        name="zipcode"
        pattern="[0-9]{5}"
        required
        class="block w-40 px-4 py-3 text-center text-xl border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[var(--accent-color)] focus:border-[var(--accent-color)] dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        placeholder="12345"
      />
    </div>
    <button
      type="submit"
      class="px-6 py-3 text-base font-medium text-white bg-[var(--accent-color)] hover:bg-[var(--accent-color-dark)] rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--accent-color)] dark:hover:bg-[var(--accent-color-dark)] flex items-center gap-2"
    >
      <Icon name="carbon:cloud-download" class="w-5 h-5" />
      Get Weather
    </button>
  </form>
</div>

<script>
  // Note: You'll need to replace 'YOUR_API_KEY' with an actual OpenWeatherMap API key
  const API_KEY = 'b56985b3321087d3526b3496bb6ce037';
  const weatherDisplay = document.getElementById('weather-display');
  const zipForm = document.getElementById('zip-form');
  const changeLocationBtn = document.getElementById('change-location');

  let savedZipCode = localStorage.getItem('weatherZipCode');
  
  if (savedZipCode) {
    fetchWeather(savedZipCode);
  }

  zipForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const zipcode = (document.getElementById('zipcode') as HTMLInputElement).value;
    await fetchWeather(zipcode);
    localStorage.setItem('weatherZipCode', zipcode);
  });

  changeLocationBtn?.addEventListener('click', () => {
    if (weatherDisplay && zipForm) {
      weatherDisplay.classList.add('hidden');
      zipForm.classList.remove('hidden');
    }
  });

  async function fetchWeather(zipcode: string) {
    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/weather?zip=${zipcode},us&units=metric&appid=${API_KEY}`
      );
      
      if (!response.ok) {
        throw new Error('Weather data not found');
      }

      const data = await response.json();
      
      if (weatherDisplay && zipForm) {
        updateWeatherDisplay(data);
        weatherDisplay.classList.remove('hidden');
        zipForm.classList.add('hidden');
      }
    } catch (error) {
      alert('Error fetching weather data. Please try again.');
      console.error('Weather fetch error:', error);
    }
  }

  function updateWeatherDisplay(data: any) {
    const iconElement = document.getElementById('weather-icon');
    const temperatureElement = document.getElementById('temperature');
    const descriptionElement = document.getElementById('description');
    const locationElement = document.getElementById('location');

    // Map OpenWeather conditions to Carbon icons
    const weatherIconMap: { [key: string]: string } = {
      '01d': 'carbon:sunny',
      '01n': 'carbon:moon',
      '02d': 'carbon:partly-cloudy',
      '02n': 'carbon:partly-cloudy',
      '03d': 'carbon:cloudy',
      '03n': 'carbon:cloudy',
      '04d': 'carbon:cloudy',
      '04n': 'carbon:cloudy',
      '09d': 'carbon:rain-heavy',
      '09n': 'carbon:rain-heavy',
      '10d': 'carbon:rain',
      '10n': 'carbon:rain',
      '11d': 'carbon:lightning',
      '11n': 'carbon:lightning',
      '13d': 'carbon:snow',
      '13n': 'carbon:snow',
      '50d': 'carbon:fog',
      '50n': 'carbon:fog'
    };

    if (iconElement) {
      const iconName = weatherIconMap[data.weather[0].icon] || 'carbon:partly-cloudy';
      iconElement.setAttribute('name', iconName);
    }
    if (temperatureElement) {
      temperatureElement.textContent = Math.round(data.main.temp).toString();
    }
    if (descriptionElement) {
      descriptionElement.textContent = data.weather[0].description;
    }
    if (locationElement) {
      locationElement.textContent = data.name;
    }
  }

  // Update weather every 5 minutes if we have a saved zip code
  if (savedZipCode) {
    setInterval(() => {
      fetchWeather(savedZipCode);
    }, 5 * 60 * 1000);
  }
</script> 
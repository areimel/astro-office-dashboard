---
import { Icon } from 'astro-icon/components'

// Try to get API key from environment variable
const envApiKey = import.meta.env.NEWS_API_KEY || '';
---

<div class="flex flex-col h-full overflow-hidden">
  <div id="news-display" class="hidden flex-col h-full overflow-hidden">
    <div class="flex items-center mb-4">
      <Icon name="mdi:newspaper-variant-outline" class="w-8 h-8 text-[var(--accent-color)]" />
      <h2 class="text-2xl font-bold text-[var(--accent-color)] ml-2">Top Headlines</h2>
    </div>
    <div class="relative flex-1 h-64 overflow-hidden">
      <div id="headlines-container" class="absolute w-full  space-y-4">
        <!-- Headlines will be displayed here -->
      </div>
    </div>
    <div class="flex justify-between items-center mt-4">
      <button
        id="toggle-scroll"
        class="text-base text-[var(--accent-color)] hover:text-[var(--accent-color-dark)] hover:underline flex items-center gap-2"
      >
        <Icon name="mdi:pause" class="w-5 h-5" id="scroll-icon" />
        <span id="scroll-text">Pause Scroll</span>
      </button>
      <button
        id="refresh-news"
        class="text-base text-[var(--accent-color)] hover:text-[var(--accent-color-dark)] hover:underline flex items-center gap-2"
      >
        <Icon name="mdi:newspaper-variant-outline" class="w-5 h-5" />
        Refresh Headlines
      </button>
    </div>
  </div>

  <form id="api-key-form" class="flex-1 flex flex-col items-center justify-center space-y-4">
    <div class="text-center space-y-2">
      <label for="guardian-api-key" class="block text-lg font-medium text-gray-700 dark:text-gray-300">
        Enter your Guardian API key
      </label>
      <input
        type="text"
        id="guardian-api-key"
        name="guardian-api-key"
        required
        class="block w-64 px-4 py-3 text-center border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[var(--accent-color)] focus:border-[var(--accent-color)] dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        placeholder="Your API Key"
      />
    </div>
    <button
      type="submit"
      class="px-6 py-3 text-base font-medium text-white bg-[var(--accent-color)] hover:bg-[var(--accent-color-dark)] rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--accent-color)] dark:hover:bg-[var(--accent-color-dark)] flex items-center gap-2"
    >
      <Icon name="mdi:refresh" class="w-5 h-5" />
      Load Headlines
    </button>
  </form>
</div>

<script define:vars={{ envApiKey }}>
  const newsDisplay = document.getElementById('news-display');
  const apiKeyForm = document.getElementById('api-key-form');
  const refreshNewsBtn = document.getElementById('refresh-news');
  const headlinesContainer = document.getElementById('headlines-container');
  const toggleScrollBtn = document.getElementById('toggle-scroll');
  const scrollIcon = document.getElementById('scroll-icon');
  const scrollText = document.getElementById('scroll-text');

  const GUARDIAN_API_ENDPOINT = 'https://content.guardianapis.com/search';
  const ITEMS_TO_DISPLAY = 10; // Increased for more content to scroll
  const SCROLL_SPEED = 0.5; // px per frame (slower for easier reading)
  
  // Define search terms with operators for Guardian API
  // Format: { "term": "operator" }
  // Operators: "AND", "OR", "NOT"
  // Example: { "technology": "AND", "politics": "OR", "sports": "NOT" }
  // This will search for content containing "technology" AND either containing "politics" OR NOT containing "sports"
  const SEARCH_TERMS = {
    "technology": "OR",   // Must include technology
    "digital": "OR",       // May include digital
    "climate": "NOT",      // Must include climate
    "politics": "NOT",
    "sport": "NOT"         // Must not include sport
  };
  
  let savedApiKey = localStorage.getItem('guardianApiKey');
  
  // Check for API key in this order: localStorage, env variable, none
  const apiKey = savedApiKey || envApiKey || '';
  
  // Auto-scroll variables
  let scrollInterval = null;
  let isScrolling = true;
  let scrollPosition = 0;
  
  if (apiKey) {
    fetchHeadlines(apiKey);
  }

  apiKeyForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const inputApiKey = document.getElementById('guardian-api-key').value;
    await fetchHeadlines(inputApiKey);
    localStorage.setItem('guardianApiKey', inputApiKey);
  });

  refreshNewsBtn?.addEventListener('click', async () => {
    const currentApiKey = localStorage.getItem('guardianApiKey') || envApiKey || '';
    if (currentApiKey) {
      await fetchHeadlines(currentApiKey);
    }
  });
  
  toggleScrollBtn?.addEventListener('click', () => {
    toggleScrolling();
  });

  async function fetchHeadlines(apiKey) {
    try {
      // Build the q parameter for search terms with operators
      let searchQuery = '';
      
      // Process AND terms first (must include)
      const andTerms = Object.entries(SEARCH_TERMS)
        .filter(([_, operator]) => operator === 'AND')
        .map(([term, _]) => term);
      
      if (andTerms.length > 0) {
        searchQuery += andTerms.join(' AND ');
      }
      
      // Process OR terms (may include)
      const orTerms = Object.entries(SEARCH_TERMS)
        .filter(([_, operator]) => operator === 'OR')
        .map(([term, _]) => term);
      
      if (orTerms.length > 0) {
        if (searchQuery) searchQuery += ' AND (';
        searchQuery += orTerms.join(' OR ');
        if (searchQuery.includes(' AND (')) searchQuery += ')';
      }
      
      // Process NOT terms (must not include)
      const notTerms = Object.entries(SEARCH_TERMS)
        .filter(([_, operator]) => operator === 'NOT')
        .map(([term, _]) => `NOT ${term}`);
      
      if (notTerms.length > 0) {
        if (searchQuery) searchQuery += ' AND ';
        searchQuery += notTerms.join(' AND ');
      }
      
      const params = new URLSearchParams({
        'api-key': apiKey,
        'section': 'news',
        'show-fields': 'headline,trailText',
        'page-size': ITEMS_TO_DISPLAY.toString(),
        'order-by': 'newest'
      });
      
      // Add the query parameter if we have search terms
      if (searchQuery) {
        params.append('q', searchQuery);
      }
      
      const response = await fetch(`${GUARDIAN_API_ENDPOINT}?${params}`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch headlines');
      }

      const data = await response.json();
      
      if (newsDisplay && apiKeyForm && headlinesContainer) {
        updateNewsDisplay(data.response.results);
        newsDisplay.classList.remove('hidden');
        apiKeyForm.classList.add('hidden');
        
        // Reset scroll position when new headlines are loaded
        resetScroll();
      }
    } catch (error) {
      alert('Error fetching news headlines. Please check your API key and try again.');
      console.error('News fetch error:', error);
    }
  }

  function updateNewsDisplay(articles) {
    if (!headlinesContainer) return;
    
    headlinesContainer.innerHTML = '';
    
    articles.forEach(article => {
      const articleElement = document.createElement('div');
      articleElement.className = 'p-3 border border-gray-200 dark:border-gray-700 rounded-md hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors';
      
      const titleElement = document.createElement('a');
      titleElement.href = article.webUrl;
      titleElement.target = '_blank';
      titleElement.className = 'text-lg font-semibold text-[var(--accent-color)] hover:underline';
      titleElement.textContent = article.webTitle;
      
      const dateElement = document.createElement('div');
      const publicationDate = new Date(article.webPublicationDate);
      dateElement.className = 'text-sm text-gray-500 dark:text-gray-400 mt-1';
      dateElement.textContent = publicationDate.toLocaleString();
      
      articleElement.appendChild(titleElement);
      articleElement.appendChild(dateElement);
      
      if (article.fields && article.fields.trailText) {
        const summaryElement = document.createElement('p');
        summaryElement.className = 'text-sm text-gray-700 dark:text-gray-300 mt-2';
        summaryElement.textContent = article.fields.trailText;
        articleElement.appendChild(summaryElement);
      }
      
      headlinesContainer.appendChild(articleElement);
    });
  }
  
  function startScrolling() {
    if (scrollInterval) clearInterval(scrollInterval);
    
    scrollInterval = setInterval(() => {
      if (!headlinesContainer) return;
      
      // Get the full height of the content and the visible container height
      const containerParent = headlinesContainer.parentElement;
      const contentHeight = headlinesContainer.scrollHeight;
      const visibleHeight = containerParent.clientHeight;
      
      // Increase scroll position
      scrollPosition += SCROLL_SPEED;
      
      // Reset when we've scrolled through all content, with a small delay at the bottom
      if (scrollPosition > contentHeight - visibleHeight + 50) {
        scrollPosition = -20; // Start slightly above to create a nice transition
      }
      
      // Apply the scroll position
      headlinesContainer.style.transform = `translateY(-${scrollPosition}px)`;
    }, 16); // ~60fps for smooth scrolling
    
    isScrolling = true;
    updateScrollControls();
  }
  
  function stopScrolling() {
    if (scrollInterval) {
      clearInterval(scrollInterval);
      scrollInterval = null;
    }
    isScrolling = false;
    updateScrollControls();
  }
  
  function toggleScrolling() {
    if (isScrolling) {
      stopScrolling();
    } else {
      startScrolling();
    }
  }
  
  function resetScroll() {
    scrollPosition = 0;
    if (headlinesContainer) {
      headlinesContainer.style.transform = 'translateY(0)';
    }
    
    // Start scrolling if not already scrolling
    if (!scrollInterval) {
      startScrolling();
    }
  }
  
  function updateScrollControls() {
    if (!scrollIcon || !scrollText) return;
    
    if (isScrolling) {
      scrollIcon.setAttribute('name', 'mdi:pause');
      scrollText.textContent = 'Pause Scroll';
    } else {
      scrollIcon.setAttribute('name', 'mdi:play');
      scrollText.textContent = 'Resume Scroll';
    }
  }
  
  // Auto-refresh headlines every 30 minutes if we have a saved API key or env key
  if (apiKey) {
    setInterval(() => {
      const currentApiKey = localStorage.getItem('guardianApiKey') || envApiKey || '';
      if (currentApiKey) {
        fetchHeadlines(currentApiKey);
      }
    }, 30 * 60 * 1000);
  }
  
  // Add event listeners for pausing scroll on hover/touch
  headlinesContainer?.parentElement?.addEventListener('mouseenter', () => {
    stopScrolling();
  });
  
  headlinesContainer?.parentElement?.addEventListener('mouseleave', () => {
    if (!isScrolling) startScrolling();
  });
  
  // Add resize observer to reset scroll when container size changes
  if (headlinesContainer) {
    const resizeObserver = new ResizeObserver(() => {
      resetScroll();
    });
    resizeObserver.observe(headlinesContainer.parentElement);
  }
</script> 
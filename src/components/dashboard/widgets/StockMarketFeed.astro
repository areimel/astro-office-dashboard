---
import { Icon } from 'astro-icon/components'
import AutoScrollContainer from '../../ui/AutoScrollContainer.astro';

// Get API key from environment variable
const envApiKey = import.meta.env.ALPHA_VANTAGE_API_KEY || '';

// Default stocks to track - can be customized later
const DEFAULT_STOCKS = ['AAPL', 'GOOGL', 'MSFT'];

// Check if we have an API key to set initial visibility
const hasApiKey = !!envApiKey || !!Astro.cookies.get('alphavantageApiKey')?.value;
---

<div class="flex flex-col h-full overflow-hidden">
  <div id="stock-display" class={`flex flex-col h-full ${!hasApiKey ? 'hidden' : ''}`}>
    <div class="flex items-center justify-between border-b-2 border-[var(--accent-color)] pb-2 mb-2">
      <div class="flex items-center">
        <Icon name="mdi:chart-line" class="w-8 h-8 text-[var(--accent-color)]" />
        <h2 class="text-2xl font-bold text-[var(--accent-color)] ml-2">Stock Market</h2>
        <span class="text-xs text-gray-500 ml-2 pl-2 border-l-2 border-gray-500">provided by Alpha Vantage</span>
      </div>

      <button
        id="refresh-stocks"
        class="text-base text-[var(--accent-color)] hover:text-[var(--accent-color-dark)] hover:underline flex items-center gap-2"
      >
        <Icon name="mdi:refresh" class="w-5 h-5" />
        Refresh Data
      </button>
    </div>
    
    <AutoScrollContainer class="flex-1">
      <div id="stocks-container" class="space-y-4">
        <!-- Stock data will be displayed here -->
      </div>
    </AutoScrollContainer>
  </div>

  <form id="api-key-form" class={`flex-1 flex flex-col items-center justify-center space-y-4 ${hasApiKey ? 'hidden' : ''}`}>
    <div class="text-center space-y-2">
      <label for="alphavantage-api-key" class="block text-lg font-medium text-gray-700 dark:text-gray-300">
        Enter your Alpha Vantage API key
      </label>
      <input
        type="text"
        id="alphavantage-api-key"
        name="alphavantage-api-key"
        required
        class="block w-64 px-4 py-3 text-center border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[var(--accent-color)] focus:border-[var(--accent-color)] dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        placeholder="Your API Key"
      />
    </div>
    <button
      type="submit"
      class="px-6 py-3 text-base font-medium text-white bg-[var(--accent-color)] hover:bg-[var(--accent-color-dark)] rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--accent-color)] dark:hover:bg-[var(--accent-color-dark)] flex items-center gap-2"
    >
      <Icon name="mdi:refresh" class="w-5 h-5" />
      Load Stock Data
    </button>
  </form>
</div>

<script define:vars={{ envApiKey, DEFAULT_STOCKS }}>
  const stockDisplay = document.getElementById('stock-display');
  const apiKeyForm = document.getElementById('api-key-form');
  const refreshStocksBtn = document.getElementById('refresh-stocks');
  const stocksContainer = document.getElementById('stocks-container');

  const ALPHA_VANTAGE_ENDPOINT = 'https://www.alphavantage.co/query';
  
  let savedApiKey = localStorage.getItem('alphavantageApiKey');
  const apiKey = savedApiKey || envApiKey || '';
  
  if (apiKey) {
    fetchStockData(apiKey);
  }

  apiKeyForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const inputApiKey = document.getElementById('alphavantage-api-key').value;
    await fetchStockData(inputApiKey);
    localStorage.setItem('alphavantageApiKey', inputApiKey);
  });

  refreshStocksBtn?.addEventListener('click', async () => {
    const currentApiKey = localStorage.getItem('alphavantageApiKey') || envApiKey || '';
    if (currentApiKey) {
      await fetchStockData(currentApiKey);
    }
  });

  async function fetchStockData(apiKey) {
    try {
      const stockPromises = DEFAULT_STOCKS.map(async (symbol) => {
        const params = new URLSearchParams({
          'function': 'TIME_SERIES_DAILY',
          'symbol': symbol,
          'apikey': apiKey,
          'outputsize': 'compact'
        });

        const response = await fetch(`${ALPHA_VANTAGE_ENDPOINT}?${params}`);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch data for ${symbol}`);
        }

        return response.json();
      });

      const stocksData = await Promise.all(stockPromises);
      
      if (stockDisplay && apiKeyForm && stocksContainer) {
        updateStockDisplay(stocksData);
        stockDisplay.classList.remove('hidden');
        apiKeyForm.classList.add('hidden');
      }
    } catch (error) {
      alert('Error fetching stock data. Please check your API key and try again.');
      console.error('Stock fetch error:', error);
    }
  }

  function calculateChange(currentPrice, previousPrice) {
    const change = ((currentPrice - previousPrice) / previousPrice) * 100;
    return change.toFixed(2);
  }

  function updateStockDisplay(stocksData) {
    if (!stocksContainer) return;
    
    stocksContainer.innerHTML = '';
    
    stocksData.forEach((data, index) => {
      const symbol = DEFAULT_STOCKS[index];
      const timeSeries = data['Time Series (Daily)'];
      const dates = Object.keys(timeSeries).sort().reverse();
      
      if (dates.length < 30) return; // Skip if not enough data
      
      const currentPrice = parseFloat(timeSeries[dates[0]]['4. close']);
      const oneDayAgo = parseFloat(timeSeries[dates[1]]['4. close']);
      const oneWeekAgo = parseFloat(timeSeries[dates[5]]['4. close']);
      const oneMonthAgo = parseFloat(timeSeries[dates[20]]['4. close']);
      
      const dayChange = calculateChange(currentPrice, oneDayAgo);
      const weekChange = calculateChange(currentPrice, oneWeekAgo);
      const monthChange = calculateChange(currentPrice, oneMonthAgo);
      
      const stockElement = document.createElement('div');
      stockElement.className = 'p-4 border border-gray-200 dark:border-gray-700 rounded-md hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors';
      
      const getChangeClass = (change) => {
        return parseFloat(change) >= 0 
          ? 'text-green-600 dark:text-green-400' 
          : 'text-red-600 dark:text-red-400';
      };

      stockElement.innerHTML = `
        <div class="flex items-center justify-between mb-2">
          <h3 class="text-xl font-bold text-[var(--accent-color)]">${symbol}</h3>
          <span class="text-lg font-semibold">$${currentPrice.toFixed(2)}</span>
        </div>
        <div class="grid grid-cols-3 gap-4 text-sm">
          <div>
            <div class="text-gray-500 dark:text-gray-400">24h</div>
            <div class="${getChangeClass(dayChange)}">${dayChange}%</div>
          </div>
          <div>
            <div class="text-gray-500 dark:text-gray-400">1w</div>
            <div class="${getChangeClass(weekChange)}">${weekChange}%</div>
          </div>
          <div>
            <div class="text-gray-500 dark:text-gray-400">1m</div>
            <div class="${getChangeClass(monthChange)}">${monthChange}%</div>
          </div>
        </div>
      `;
      
      stocksContainer.appendChild(stockElement);
    });
  }
  
  // Auto-refresh stock data every 5 minutes if we have a saved API key or env key
  if (apiKey) {
    setInterval(() => {
      const currentApiKey = localStorage.getItem('alphavantageApiKey') || envApiKey || '';
      if (currentApiKey) {
        fetchStockData(currentApiKey);
      }
    }, 5 * 60 * 1000);
  }
</script> 
---
import { Icon } from 'astro-icon/components'
import AutoScrollContainer from '../../ui/AutoScrollContainer.astro';

// Get API key from environment variable
const envApiKey = import.meta.env.ALPHA_VANTAGE_API_KEY || '';

// Default stocks to track
const DEFAULT_STOCKS = ['AAPL', 'GOOGL', 'MSFT'];

// Check if we have an API key to set initial visibility
const hasApiKey = !!envApiKey;
---

<div class="flex flex-col h-full overflow-hidden">
  <div id="stock-display" class={`flex flex-col h-full ${!hasApiKey ? 'hidden' : ''}`}>
    <div class="flex items-center justify-between border-b-2 border-[var(--accent-color)] pb-2 mb-2">
      <div class="flex items-center">
        <Icon name="mdi:chart-line" class="w-8 h-8 text-[var(--accent-color)]" />
        <h2 class="text-2xl font-bold text-[var(--accent-color)] ml-2">Stock Market</h2>
        <span class="text-xs text-gray-500 ml-2 pl-2 border-l-2 border-gray-500">provided by Alpha Vantage</span>
      </div>

      <div class="flex items-center gap-4">
        <span id="last-updated" class="text-xs text-gray-500"></span>
        <button
          id="refresh-stocks"
          class="text-base text-[var(--accent-color)] hover:text-[var(--accent-color-dark)] hover:underline flex items-center gap-2"
        >
          <Icon name="mdi:refresh" class="w-5 h-5" />
          Refresh Data
        </button>
      </div>
    </div>

    <!-- Simple error message -->
    <div id="error-message" class="hidden mb-4 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md">
      <div class="flex items-center text-red-800 dark:text-red-200">
        <Icon name="mdi:alert" class="w-5 h-5 mr-2" />
        Unable to fetch stock data. Please try again later.
      </div>
    </div>
    
    <AutoScrollContainer class="flex-1">
      <div id="stocks-container" class="space-y-4">
        <!-- Stock data will be displayed here -->
      </div>
    </AutoScrollContainer>
  </div>

  <form id="api-key-form" class={`flex-1 flex flex-col items-center justify-center space-y-4 ${hasApiKey ? 'hidden' : ''}`}>
    <div class="text-center space-y-2">
      <label for="alphavantage-api-key" class="block text-lg font-medium text-gray-700 dark:text-gray-300">
        Enter your Alpha Vantage API key
      </label>
      <input
        type="text"
        id="alphavantage-api-key"
        name="alphavantage-api-key"
        required
        class="block w-64 px-4 py-3 text-center border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-[var(--accent-color)] focus:border-[var(--accent-color)] dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        placeholder="Your API Key"
      />
    </div>
    <button
      type="submit"
      class="px-6 py-3 text-base font-medium text-white bg-[var(--accent-color)] hover:bg-[var(--accent-color-dark)] rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[var(--accent-color)] dark:hover:bg-[var(--accent-color-dark)] flex items-center gap-2"
    >
      <Icon name="mdi:refresh" class="w-5 h-5" />
      Load Stock Data
    </button>
  </form>
</div>

<script define:vars={{ envApiKey, DEFAULT_STOCKS }}>
  const stockDisplay = document.getElementById('stock-display');
  const apiKeyForm = document.getElementById('api-key-form');
  const refreshStocksBtn = document.getElementById('refresh-stocks');
  const stocksContainer = document.getElementById('stocks-container');
  const errorMessage = document.getElementById('error-message');
  const lastUpdatedElement = document.getElementById('last-updated');

  const ALPHA_VANTAGE_ENDPOINT = 'https://www.alphavantage.co/query';
  const CACHE_KEY = 'stockMarketData';
  const CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours in milliseconds
  
  let savedApiKey = localStorage.getItem('alphavantageApiKey');
  const apiKey = savedApiKey || envApiKey || '';
  
  function getCachedData() {
    const cached = localStorage.getItem(CACHE_KEY);
    if (!cached) {
      console.log('📭 No cached stock data found');
      return null;
    }
    
    try {
      const { timestamp, data } = JSON.parse(cached);
      const age = Date.now() - timestamp;
      
      // Return null if cache is older than 24 hours
      if (age > CACHE_DURATION) {
        console.log('⏰ Cached stock data expired (older than 24 hours)');
        localStorage.removeItem(CACHE_KEY);
        return null;
      }
      
      console.log('📦 Using cached stock data', {
        age: Math.round(age / 1000 / 60), // Convert to minutes
        timestamp: new Date(timestamp).toLocaleString()
      });
      return data;
    } catch (error) {
      console.error('❌ Error parsing cached data:', error);
      localStorage.removeItem(CACHE_KEY);
      return null;
    }
  }

  function setCachedData(data) {
    try {
      const cacheData = {
        timestamp: Date.now(),
        data: data
      };
      localStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));
      console.log('💾 Saved new stock data to cache');
    } catch (error) {
      console.error('❌ Error caching data:', error);
    }
  }

  function updateLastUpdated(fromCache = false) {
    if (lastUpdatedElement) {
      const now = new Date();
      const source = fromCache ? ' (from cache)' : '';
      lastUpdatedElement.textContent = `Last updated: ${now.toLocaleTimeString()}${source}`;
    }
  }

  if (apiKey) {
    const cachedData = getCachedData();
    if (cachedData) {
      updateStockDisplay(cachedData);
      updateLastUpdated(true);
      if (stockDisplay && apiKeyForm) {
        stockDisplay.classList.remove('hidden');
        apiKeyForm.classList.add('hidden');
      }
    } else {
      fetchStockData(apiKey);
    }
  }

  apiKeyForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const inputApiKey = document.getElementById('alphavantage-api-key').value;
    await fetchStockData(inputApiKey);
    localStorage.setItem('alphavantageApiKey', inputApiKey);
  });

  refreshStocksBtn?.addEventListener('click', async () => {
    const currentApiKey = localStorage.getItem('alphavantageApiKey') || envApiKey || '';
    if (currentApiKey) {
      await fetchStockData(currentApiKey);
    }
  });

  async function fetchStockData(apiKey) {
    try {
      console.log('🔄 Fetching fresh stock data from API...');
      if (errorMessage) errorMessage.classList.add('hidden');
      
      const stockPromises = DEFAULT_STOCKS.map(async (symbol) => {
        const params = new URLSearchParams({
          'function': 'TIME_SERIES_DAILY',
          'symbol': symbol,
          'apikey': apiKey,
          'outputsize': 'compact'
        });

        const response = await fetch(`${ALPHA_VANTAGE_ENDPOINT}?${params}`);
        const data = await response.json();
        
        // Check if we hit the API limit
        if (data.Note || data['Error Message']) {
          console.error('⚠️ API Error:', data.Note || data['Error Message']);
          throw new Error(data.Note || data['Error Message']);
        }
        
        return { symbol, data };
      });

      const results = await Promise.all(stockPromises);
      console.log('✅ Successfully fetched fresh stock data');
      updateStockDisplay(results);
      setCachedData(results);
      updateLastUpdated();
      
      if (stockDisplay && apiKeyForm) {
        stockDisplay.classList.remove('hidden');
        apiKeyForm.classList.add('hidden');
      }
    } catch (error) {
      console.error('❌ Stock fetch error:', error);
      if (errorMessage) errorMessage.classList.remove('hidden');
      if (!stocksContainer.children.length) {
        stockDisplay.classList.add('hidden');
        apiKeyForm.classList.remove('hidden');
      }
    }
  }

  function updateStockDisplay(stocksData) {
    if (!stocksContainer) return;
    
    stocksContainer.innerHTML = '';
    
    stocksData.forEach(({ symbol, data }) => {
      try {
        const timeSeries = data['Time Series (Daily)'];
        if (!timeSeries) return;
        
        const dates = Object.keys(timeSeries).sort().reverse();
        if (dates.length < 2) return;
        
        const currentPrice = parseFloat(timeSeries[dates[0]]['4. close']);
        const previousPrice = parseFloat(timeSeries[dates[1]]['4. close']);
        const weekAgoPrice = dates.length >= 5 ? parseFloat(timeSeries[dates[5]]['4. close']) : previousPrice;
        const monthAgoPrice = dates.length >= 20 ? parseFloat(timeSeries[dates[20]]['4. close']) : weekAgoPrice;
        
        const dayChange = ((currentPrice - previousPrice) / previousPrice * 100).toFixed(2);
        const weekChange = ((currentPrice - weekAgoPrice) / weekAgoPrice * 100).toFixed(2);
        const monthChange = ((currentPrice - monthAgoPrice) / monthAgoPrice * 100).toFixed(2);
        
        const stockElement = document.createElement('div');
        stockElement.className = 'p-4 border border-gray-200 dark:border-gray-700 rounded-md hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors';
        
        const getChangeClass = (change) => {
          return parseFloat(change) >= 0 
            ? 'text-green-600 dark:text-green-400' 
            : 'text-red-600 dark:text-red-400';
        };

        stockElement.innerHTML = `
          <div class="flex items-center justify-between mb-2">
            <h3 class="text-xl font-bold text-[var(--accent-color)]">${symbol}</h3>
            <span class="text-lg font-semibold">$${currentPrice.toFixed(2)}</span>
          </div>
          <div class="grid grid-cols-3 gap-4 text-sm">
            <div>
              <div class="text-gray-500 dark:text-gray-400">24h</div>
              <div class="${getChangeClass(dayChange)}">${dayChange}%</div>
            </div>
            <div>
              <div class="text-gray-500 dark:text-gray-400">1w</div>
              <div class="${getChangeClass(weekChange)}">${weekChange}%</div>
            </div>
            <div>
              <div class="text-gray-500 dark:text-gray-400">1m</div>
              <div class="${getChangeClass(monthChange)}">${monthChange}%</div>
            </div>
          </div>
        `;
        
        stocksContainer.appendChild(stockElement);
      } catch (error) {
        console.error('Error displaying stock:', symbol, error);
      }
    });
  }
</script> 